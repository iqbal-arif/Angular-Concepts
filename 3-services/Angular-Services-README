#************* Angular Services Setup *************#

1. git link
   https://github.com/angular-university/angular-course/tree/3-services

2. git checkout -b 2-services origin/2-directives.

3. npm update

4. npm start

5. For Backup API Server: in second Terminal start : npm run server
This will allow to query Backend and display query on the screen using angular HTTP service

#************* Angular HTTP Client Services *************#
1. Connecting Database Through HTTP Client Services constructor(private http: HttpClient) {}
2. Using ngOnInit Life-cycle Hooks to Initialize logic, such as, triggering Backend Call to fetch Data for component
3. This ngOnInit method is called by Angular Framework
4. Adding parameters to Http get request via Angular HttpParams utility
   const params = new HttpParams().set("page", "1").set("pageSize", "10");
5. Adding parameters to Http get request via Angular HttpParams utility
    const params = new HttpParams().set("page", "1").set("pageSize", "10");
6. http.get gives unobservable. To display the content use .subscribe() method
7. Adding request parameters from params constant
    this.http.get("/api/courses", { params }) 


#************* Angular Async Pipe *************#
1. Async Pipe allows implicitly subscribe to observable from the template
2. Without Async the observable are derived manually and are mutable
3. Define Observable annotation: courses$: Observable<Course[]>;
4. Fetch the Params Values: this.courses$ = this.http.get<Course[]>("/api/courses", { params });
5. Reference to App View Template:
   <course-card *ngFor="let course of courses$ | async" [course]="course">
   1. Once course value arrives from API it will be displayed to Template view ngcontent utility


#************* Custom Angular Services *************#
1. Generate service template
ng generate service services/courses